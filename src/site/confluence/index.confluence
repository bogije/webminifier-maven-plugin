h1. Introduction

h2. Why use Maven for Javascript ?
Javascript is a... script language. It does not require compilation neither packaging to be released. However Javascript can benefit from tooling given that: tests should be run; Continuous Integration should be supported; dependency management;and packaging and deployment should be automated.

Maven's goal of project comprehension stands for any language.

Javascript developers have created nice toolkits like QUnit and JsDocs to get a productive and controlled development environment. They also use libraries like jQuery for development, split code into fine grained scripts and use some assembly tools to create the released scripts.

The Javascript Maven Tools project brings together tools from many places and greatly reduces the burden on you to develop your Javascript library or application.

h2. Project Definition
Your project simply configures one extension in a pom file to enable javascript support:

{code}
<?xml version="1.0" encoding="UTF-8"?>
<project 
  xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  <modelVersion>4.0.0</modelVersion>
  
  <groupId>your groupid</groupId>
  <artifactId>your artifact id</artifactId>
  <version>your version</version>
  <packaging>js</packaging>
  
  <name>Some name</name>
  <description>A really nice description</description>
  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <build>
    <extensions>
      <extension>
        <groupId>org.codehaus.mojo.javascript</groupId>
        <artifactId>javascript-maven-plugin</artifactId>
        <version>2.0.0-SNAPSHOT</version>
      </extension>
    </extensions>
  </build>

</project>
{code}

Once you have your pom file then you can load your application into a web browser via http://localhost:8080/ using the following command:

{code}
mvn jetty:run
{code}

h2. Conventions
Maven Javascript Tools and associated plugins use the following conventions for directory structure. Conforming with this layout will keep your POM files as simple as possible.

{noformat}
  <project-root>/
  |
  +- pom.xml
  |
  +- src/
  |  |
  |  +- main/
  |  |  |
  |  |  +- js/ (source location for Scripts)
  |  |  +- resources/ (source location for any static resources)
  |  |
  |  +- test/
  |  |  |
  |  |  +- js/ (source location for test scripts)
  |  |  +- resources/ (source location for test resources)
  |  |
  ...
{noformat}
