h1. Usage

h2. Binding goals

The common method of usage is to simply declare the plugin and its goals. Associate the {{minify-js}} goal with the (bound by default) {{prepare-package}} phase to have the plugin invoked, like so:

{code}
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webminifier-maven-plugin</artifactId>
        <version>${projectVersion}</version>
        <executions>
          <execution>
            <goals>
              <goal>minify-js</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  ...
</project>
{code}

h2. Configuration

Configuration options can be passed to the plugin using a {{configuration}} section, like so:

{code}
    ...
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webminifier-maven-plugin</artifactId>
        ...
        <configuration>
          <jsCompressorType>YUI</jsCompressorType>
          <jsSplitPoints>
            <property>
              <name>js/framework.js</name>
              <value>myframeworkfilename</value>
            </property>
          </jsSplitPoints>
          <yuiJSObfuscate>false</yuiJSObfuscate>
        </configuration>
      </plugin>
    ...
{code}

h2. Example

Given the following plugin configuration:

{code}
    ...
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webminifier-maven-plugin</artifactId>
        <version>${projectVersion}</version>
        <executions>
          <execution>
            <goals>
              <goal>minify-js</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jsSplitPoints>
            <property>
              <name>js/framework.js</name>
              <value>myframeworkfilename</value>
            </property>
          </jsSplitPoints>
        </configuration>
      </plugin>
    ...
{code}

And the following directory structure before minifcation:
- app.html
- js/utilities.js
- js/framework.js
- js/ui.js
- js/application.js

With the following references in the file target/min/classes/app.html:

{code}
    ...
    <script type="text/javascript" src="js/utilities.js"></script>
    <script type="text/javascript" src="js/framework.js"></script>
    <script type="text/javascript" src="js/ui.js"></script>
    <script type="text/javascript" src="js/application.js"></script>
    ...
{code}

You'd see the following files in target/min/classes after minification:

- app.html
- myframeworkfilename.js & myframeworkfilename.min.js (containing utilities.js and framework.js)
- 1.js & 1.min.js (containing ui.js and application.js)

And the references in target/min/classes/app.html would be re-written like:

{code}
    ...
    <script type="text/javascript" src="myframeworkfilename.min.js"></script>
    <script type="text/javascript" src="1.min.js"></script>
    ...
{code}

What has happened here is that the minifier found "framework.js" in the list and minified this and everything above it (utilities.js) and then named the resulting file "myframeworkfilename" as instructed.
The 1.min.js file is named so given that the configuration did not specify an alternate name for application.js. Numbers are therefore used in this context.