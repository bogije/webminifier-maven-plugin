h1. Usage

h2. Binding goals

The common method of usage is to simply declare the plugin and its goals. Associate the {{minify-js}} and {{minify-css}} goals with the (bound by default) {{prepare-package}} phase to have the plugin invoked, like so:

{code}
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webminifier-maven-plugin</artifactId>
        <version>${projectVersion}</version>
        <executions>
          <execution>
            <goals>
              <goal>minify-js</goal>
              <goal>minify-css</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  ...
</project>
{code}

h2. Configuration

Configuration options can be passed to the plugin using a {{configuration}} section, like so:

{code}
    ...
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webminifier-maven-plugin</artifactId>
        ...
        <configuration>
          <jsCompressorType>YUI</jsCompressorType>
          <jsSplitPoints>framework.js</jsSplitPoints>
          <yuiJSObfuscate>false</yuiJSObfuscate>
        </configuration>
      </plugin>
    ...
{code}

h2. Example

Given the following plugin configuration:

{code}
    ...
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webminifier-maven-plugin</artifactId>
        <version>${projectVersion}</version>
        <executions>
          <execution>
            <goals>
              <goal>minify-js</goal>
              <goal>minify-css</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jsSplitPoints>framework.js</jsSplitPoints>
        </configuration>
      </plugin>
    ...
{code}

And the following directory structure before minifcation:
- app.html
- utilities.js
- framework.js
- ui.js
- application.js
- framework.css
- ui.css
- application.css

With the following references in the file target/min/classes/app.html:

{code}
	...
	<script type="text/javascript" src="utilities.js"></script>
	<script type="text/javascript" src="framework.js"></script>
	<script type="text/javascript" src="ui.js"></script>
	<script type="text/javascript" src="application.js"></script>
	...
	<link rel="stylesheet" type="text/css" href="framework.css" />
	<link rel="stylesheet" type="text/css" href="ui.css" />
	<link rel="stylesheet" type="text/css" href="application.css" />
	...
{code}

You'd see the following files in target/min/classes after minification:

- app.html
- 1.min.js (containing utilities.js and framework.js)
- 2.min.js (containing ui.js and application.js)
- 1.min.css (containing framework.css, ui.css and application.css)

And the references in target/min/classes/app.html would be re-written like:

{code}
	...
	<script type="text/javascript" src="1.min.js"></script>
	<script type="text/javascript" src="2.min.js"></script>
	...
	<link rel="stylesheet" type="text/css" href="1.css" />
	...
{code}
